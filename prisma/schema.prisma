// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model User {
   id String @id @default(uuid())
   name String @db.VarChar(50)
   email String @unique
   password String
   profilePhoto String?
   mobile     Int
   address Json? @db.Json
   paymentMethod String?
   role USER_ROLE @default(CUSTOMER)
   isDeleted Boolean @default(false)
   isBlocked Boolean @default(false)
   createdAt DateTime @default(now())
   updatedAt DateTime @updatedAt
   Review Review[]
   ReviewVote ReviewVote[]
   Blog Blog[]
   BlogVote BlogVote[]
   Order Order[]
   @@map("user")
}


model Product {
  productId   String   @id @default(uuid())
  name        String   @db.VarChar(50)
  price       Int
  description String
  productPhoto String
  quantity    Int
  isDeleted   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  categoryId  String
  category    Category @relation(fields: [categoryId], references: [categoryId])  // this is the foreign key relationship
  orderItems OrderItem[]
  Review      Review[]
  @@map("product")
}

model Category {
  categoryId String   @id @default(uuid())
  name       String   @db.VarChar(50)
  image      String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  isDeleted  Boolean  @default(false)
  product    Product[]
}

model Order {
  orderId String @id @default(uuid())
  userId String
  total Float
  discounts Float?
  shippingAddress Json @db.Json
  paymentMethod   String
  paymentResult   Json?       @db.Json
  subTotal Float
  transactionId String?
  paymentStatus PAYMENT_STATUS @default(PENDING)
  orderStatus ORDER_STATUS @default(PENDING)
  user User @relation(fields: [userId], references: [id])
  couponId       String?        // Relation to Coupon
  coupon         Coupon?        @relation(fields: [couponId], references: [id])
  orderItems OrderItem[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
} 


model OrderItem {
  orderItemId String @id @default(uuid())
  orderId String
  productId String
  quantity Int
  price Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  order Order @relation(fields: [orderId], references: [orderId])
  product Product @relation(fields: [productId], references: [productId])
}

model Coupon {
  id           String   @id @default(uuid())
  code         String   @unique
  discount     Float    // Discount amount
    // Maximum number of times this coupon can be used
  currentUses  Int      @default(0) // Tracks how many times the coupon has been used
  expiresAt    DateTime? // Expiration date

  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  Order Order[]
}



model Review {
  reviewId   String        @id @default(uuid())
  content    String
  rating     Int?        
  userId     String
  productId  String
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt
  user       User          @relation(fields: [userId], references: [id])
  product    Product       @relation(fields: [productId], references: [productId])
  votes      ReviewVote[]

  @@map("review")
}

model ReviewVote {
  id        String   @id @default(uuid())
  reviewId  String
  userId    String
  vote      Vote
  createdAt DateTime @default(now())

  review    Review   @relation(fields: [reviewId], references: [reviewId])
  user      User     @relation(fields: [userId], references: [id])

  @@unique([reviewId, userId])
  @@map("review_vote")
}


model Blog {
  blogId      String   @id @default(uuid())
  image       String
  title       String   @db.VarChar(100)
  content     String?  
  publishDate DateTime? 
  authorId    String   // Field to store the author's ID
  author      User     @relation(fields: [authorId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  votes       BlogVote[]

  @@map("blog")
}

model BlogVote {
  id        String      @id @default(uuid())
  blogId    String
  userId    String     
  vote      VoteForBlog
  createdAt DateTime    @default(now())

  blog      Blog   @relation(fields: [blogId], references: [blogId])
  user      User   @relation(fields: [userId], references: [id])

  @@unique([blogId, userId])
  @@map("blog_vote")
}






enum USER_ROLE {
  CUSTOMER
  SUPERADMIN
}

enum Vote {
  LIKE
  DISLIKE
}

enum VoteForBlog {
  UPVOTE
  DOWNVOTE
}  

enum PAYMENT_STATUS {
  PENDING
  COMPLETED
  FAILED
}


enum ORDER_STATUS {
  PENDING
  ONGOING
  DELIVERED
  CANCELLED
  RETURNED
}
